{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","Form","Group","controlId","Label","Control","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","copyText","setcopyText","show","setShow","useRef","useEffect","setTimeout","Col","md","className","Card","Img","variant","src","alt","Body","Title","Text","Footer","text","onCopy","Button","ref","onClick","Overlay","current","placement","props","Tooltip","GifGrid","loading","state","setState","then","imgs","useFetchGifs","CardGroup","Row","key","GifExpertApp","categories","Container","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09cc2c13.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\"); // ''\r\n\r\n  const handleInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label>Type in the box to seek some gifs for you</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          placeholder=\"Example...Tacos\"\r\n        />\r\n      </Form.Group>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","\r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=A8xMXqzieIHmtO3BjGLAtf1daSSDAv8K`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n\r\n}","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { Card, Button, Col, Tooltip, Overlay } from \"react-bootstrap\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n  const [copyText, setcopyText] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const target = useRef(null);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setcopyText(false);\r\n      setShow(false);\r\n    }, 2000);\r\n  }, [copyText]);\r\n\r\n  return (\r\n    <Col md={4} className=\"mb-4\">\r\n      <Card className=\"card animate__animated animate__fadeIn\">\r\n        <Card.Img variant=\"top\" src={url} alt={title} />\r\n        <Card.Body>\r\n          <Card.Title className=\"card-title\">\r\n            {title.length > 0 ? title : \"No title found\"}\r\n          </Card.Title>\r\n        </Card.Body>\r\n        <Card.Text>{title.length > 0 ? \"\" : \"Sorry, but the author doesn't put it some title in the gif\"}</Card.Text>\r\n        <Card.Footer>\r\n          <CopyToClipboard text={url} onCopy={() => setcopyText(true)}>\r\n            <Button\r\n              className=\"copy-button rounded-pill\"\r\n              ref={target}\r\n              onClick={() => setShow(!show)}\r\n            >\r\n              Copy\r\n            </Button>\r\n          </CopyToClipboard>\r\n          <Overlay target={target.current} show={show} placement=\"right\">\r\n            {(props) => (\r\n              <Tooltip id=\"overlay-example\" {...props}>\r\n                Copied!\r\n              </Tooltip>\r\n            )}\r\n          </Overlay>\r\n        </Card.Footer>\r\n      </Card>\r\n    </Col>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { CardGroup, Row } from \"react-bootstrap\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <CardGroup>\r\n        <h3 className=\"animate__animated animate__fadeIn\"> {category} </h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n        <div className=\"card-grid\">\r\n          <Row md={4}>\r\n            {images.map((img) => (\r\n              <GifGridItem key={img.id} {...img} />\r\n            ))}\r\n          </Row>\r\n        </div>\r\n      </CardGroup>\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n\r\n    }, [category])\r\n\r\n\r\n\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport { Container} from \"react-bootstrap\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"One Punch\"]);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories} />\r\n        <hr />\r\n\r\n        <div>\r\n          {categories.map((category) => (\r\n            <GifGrid key={category} category={category} />\r\n          ))}\r\n        </div>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport { GifExpertApp } from './GifExpertApp';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <GifExpertApp />,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}